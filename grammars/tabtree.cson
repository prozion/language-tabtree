name: "Tabtree"
scopeName: "source.tabtree"
comment: '''

'''
fileTypes: [
  "tree"
  "mtree" # tree with multilines
]
'firstLineMatch': '^#!\\s*/.*\\bracket'
foldingStartMarker: '''
  (?x)^ [ \t]* \(
  	  (?<par>
  	    ( [^()\n]++ | \( \g<par> \)? )*+
  	  )
  	$
'''
foldingStopMarker: "^\\s*$"
patterns: [
  {
    include: "#comment"
  }
  {
    include: "#hyperlink"
  }
  {
    include: "#date"
  }
  {
    include: "#specialword"
  }
  {
    include: "#parameters"
  }
  {
    include: "#string"
  }
  {
    include: "#superclass"
  }
  {
    include: "#category"
  }
  {
    include: "#object"
  }
  {
    include: "#constants"
  }
  {
    include: "#sbgn_lisp"
  }
]
repository:
  parameters:
    patterns: [
      {
        name: "keyword.control"
        match: "(\\b[^\"\t ]+?:)"
      }
    ]
  comment:
    patterns: [
      {
        name: "comment.line.semicolon.racket"
        captures:
          "1":
            name: "punctuation.definition.comment.racket"
        match: "(;).*$\\n?"
      }
    ]
  constants:
    patterns: [
      {
        name: "constant.numeric.racket"
        match: "(?<=:|,|(\\s|:)-)([<~>]?[\\-+]?[0-9\\.]+)(?=[\\s,])"
        # match: "(?<=[\\(\\s])((#e|#i)?-?[0-9]+(\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\s;()'\",\\[\\]])"
      }
    ]
  hyperlink:
    patterns: [
      {
        name: "markup.underline.link"
        # match: "(?<=\")http.*?(?=\")"
        match: "(?<=url:).*?(?=\\s)|(?<=wikipedia:).*?(?=\\s)"
        # match: "(?<=\")http//[A-Za-z0-9\-/.]+?(?=\")"
        # match: "(?<=:)[A-Za-z0-9\-]+\\.[A-Za-z0-9/.\-]+\\.(ru|by|ua|no|se|de|com|net|org|us|uk|info|io)"
      }
    ]
  string:
    patterns: [
      {
        name: "string.quoted.double.racket"
        match: "(\"[^\"]*?\")"
      }
    ]
  superclass:
    patterns: [
      {
        name: "support.function.module.racket"
        match: "^[\\t]*?([a-zа-я][A-Za-zА-Яа-я0-9_\\-\\(\\)/]*)\\t$"
      }
    ]
  category:
    patterns: [
      {
        name: "keyword.control.racket"
        # match: "^[\\t]*?([a-zа-я][A-Za-zА-Яа-яё0-9_+\\-\\(\\)/]*?)(\\s+\\b|$)"
        match: "^[\\t]*?([a-zа-я][A-Za-zА-Яа-яё0-9_+\\-\\(\\)/]*?)(?=(\\s+\\b|$|\\s+;))"
      }
    ]
  object:
    patterns: [
      {
        name: "source.tabtree"
        match: "^[\\t]*?([A-ZА-Я][A-Za-zА-Яа-я0-9_\\-\\(\\)/]*?)(\\s+|\\s+\\b|$)"
      }
    ]
  specialword:
    patterns: [
      {
        # name: "meta.declaration.variable" ; red
        name: "support.function.general.racket"
        match: "<(exists|t|null|unique|others|none|many|gen-id|\\.|\\?)>"
      }
    ]
  date:
    patterns: [
      {
        # name: "meta.declaration.variable"
        name: "constant.numeric.racket"
        match: "(?<=:)~?(((BC|AD)-)?([0-9x]{2}\\.)?((([0x][1-9x])|([1x][012x]))\\.)?[0-9x]{4}|((17|18|19|20)\\d{2})|(BC|AD)-\\d{1,4})(?=\\s)"
      }
      # for date as a key:
      {
        name: "constant.numeric.racket"
        match: "(?<=\t)(((BC|AD)-)?\
                    ([0-9x]{2}(\\+[1-9y]{1,2})?\\.)?\
                    ((([0x][1-9x])|([1x][012x]))\\??\\.)?\
                    [0-9x]{4}|((17|18|19|20)\\d{2})|(BC|AD)-\\d{1,4})\
                (\\?|~|>)?(?=\\s)"
      }
    ]
  sbgn_lisp:
    patterns: [
      {
        name: "meta.declaration.variable"
        # name: "markup.tabtree.sbgn_lisp"
        match: "`.*`"
      }
    ]
