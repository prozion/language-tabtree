name: "Tabtree"
scopeName: "source.tabtree"
comment: '''

'''
fileTypes: [
  "tree"
  "mtree" # tree with multilines
]
'firstLineMatch': '^#!\\s*/.*\\bracket'
foldingStartMarker: '''
  (?x)^ [ \t]* \(
  	  (?<par>
  	    ( [^()\n]++ | \( \g<par> \)? )*+
  	  )
  	$
'''
foldingStopMarker: "^\\s*$"
patterns: [
  {
    include: "#comment"
  }
  {
    include: "#hyperlink"
  }
  {
    include: "#date"
  }
  {
    include: "#time"
  }
  {
    include: "#place"
  }
  {
    include: "#money"
  }
  {
    include: "#percentage"
  }
  {
    include: "#specialword"
  }
  {
    include: "#parameters"
  }
  {
    include: "#string"
  }
  {
    include: "#superclass"
  }
  {
    include: "#category"
  }
  {
    include: "#object"
  }
  {
    include: "#constants"
  }
  {
    include: "#code"
  }
]
repository:
  parameters:
    patterns: [
      {
        name: "keyword.control"
        match: "(?<=\\s)(\\-?[^\"\t ]+?:)"
      }
    ]
  comment:
    patterns: [
      {
        name: "comment.line.semicolon.racket"
        captures:
          "1":
            name: "punctuation.definition.comment.racket"
        match: "(;).*$\\n?"
      }
    ]
  constants:
    patterns: [
      {
        name: "constant.numeric.racket"
        match: "(?<=:|,|-|(\\s|:)-)([<~>]?[\\-+]?[0-9\\.]+)(?=[\\s,-])"
        # match: "(?<=[\\(\\s])((#e|#i)?-?[0-9]+(\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\s;()'\",\\[\\]])"
      }
      # pull ups
      {
        name: "constant.numeric.racket"
        match: "(?<=:|,|(\\s|:)-)([<~>]?[\\-+]?[0-9ul\\.]+)(?=[\\s,])"
      }
    ]
  hyperlink:
    patterns: [
      {
        name: "markup.underline.link"
        # match: "(?<=\")http.*?(?=\")"
        match: "(?<=url:).*?(?=\\s)|\
                (?<=blog:).*?(?=\\s)|\
                (?<=vkontakte:).*?(?=\\s)|\
                (?<=vk:).*?(?=\\s)|\
                (?<=facebook:).*?(?=\\s)|\
                (?<=fb:).*?(?=\\s)|\
                (?<=odnoklassniki:).*?(?=\\s)|\
                (?<= ok:).*?(?=\\s)|\
                (?<=moikrug:).*?(?=\\s)|\
                (?<=my-mail:).*?(?=\\s)|\
                (?<=gplus:).*?(?=\\s)|\
                (?<=twitter:).*?(?=\\s)|\
                (?<=linkedin:).*?(?=\\s)|\
                (?<=email:).*?(?=\\s)|\
                (?<=wikipedia:).*?(?=\\s)"
        # match: "(?<=\")http//[A-Za-z0-9\-/.]+?(?=\")"
        # match: "(?<=:)[A-Za-z0-9\-]+\\.[A-Za-z0-9/.\-]+\\.(ru|by|ua|no|se|de|com|net|org|us|uk|info|io)"
      }
    ]
  string:
    patterns: [
      {
        name: "string.quoted.double.racket"
        match: "(\"[^\"]*?\")"
      }
    ]
  superclass:
    patterns: [
      {
        name: "support.function.module.racket"
        match: "^[\\t]*?([a-zа-я][A-Za-zА-Яа-я0-9_\\-\\(\\)/]*)\\t$"
      }
    ]
  date:
    patterns: [
      {
        # name: "string.quoted.double.racket"
        name: "support.function.general.racket"
        match: "(?<=(:|,|-|=))~?(((BC|AD)-)?([0-9x]{2}\\.)?((([0x][1-9x])|([1x][012x]))\\.)?[0-9x]{4}\\??|((17|18|19|20)[0-9x]{2})\\??|(BC|AD)-[0-9x]{1,4})(?=(\\s|,|-))"
      }
      # for date as a key:
      {
        name: "support.function.general.racket"
        match: "(?<=\t)(((BC|AD)-)?\
										([0-9x]{2}(\\+[1-9y]{1,2})?\\.)?\
										((([0x][1-9x])|([1x][012x]))\\??\\.)?\
										[0-9x]{4}|((17|18|19|20)[0-9x]{2})|(BC|AD)-\\d{1,4})\
								(\\?|~|>)?(?=\\s)"
      }
    ]
  time:
    patterns: [
      {
        name: "meta.declaration.variable"
        # name: "support.function.general.racket"
        match: "~?([0-9x]?[0-9x]:)?[0-6x]?[0-9x]:([0-5x][0-9x])?"
      }
    ]
  place:
    patterns: [
      {
        name: "boolean.language.constant"
        match: "(?<=city:).*?(?=\\s)|(?<=city-en:).*?(?=\\s)|\
                (?<=town:).*?(?=\\s)|\
                (?<=place:).*?(?=\\s)"
      }
    ]
  money:
    patterns: [
      {
        name: "racket.constant.keyword"
        match: "[~<>]?[0-9][0-9\\-,.]*([BMK]|[BMK]?(NOK|EUR|RUB|[$RE]))"
      }
    ]
  percentage:
    patterns: [
      {
        name: "entity.name.function.racket"
        match: "[~<>]?[0-9\-]+%%?"
      }
    ]
  category:
    patterns: [
      {
        name: "keyword.control.racket"
        # match: "^[\\t]*?([a-zа-я][A-Za-zА-Яа-яё0-9_+\\-\\(\\)/]*?)(\\s+\\b|$)"
        match: "^[\\t]*?([a-zа-я0-9][A-Za-zА-Яа-яё0-9_\\-\\(\\)/]{1,}?)(?=(\\s+\\b|$|\\s+\"|\\s+\-|\\s+;))"
        # match: "^[\\t]*?([a-zа-я0-9][A-Za-zА-Яа-яё0-9_.\\-\\(\\)/]{1,}?)(?=(\\s+\\b|$|\\s+\"|\\s+\-|\\s+;|\\s+[><=]))" ; with 'foobar >w:75' remains category
      }
      # for keyword with dots (makes possible to differ category from a date)
      {
        name: "keyword.control.racket"
        match: "^[\\t]*?([a-zа-я][A-Za-zА-Яа-яё0-9_\\-\\(\\)/]{2,}[A-Za-zА-Яа-яё0-9_.\\-\\(\\)/]{1,}?)(?=(\\s+\\b|$|\\s+\"|\\s+\-|\\s+;))"
      }
    ]
  object:
    patterns: [
      {
        name: "source.tabtree"
        match: "^[\\t]*?([A-ZА-Я][A-Za-zА-Яа-я0-9_\\-\\(\\)/]*?)(\\s+|\\s+\\b|$)"
      }
    ]
  specialword:
    patterns: [
      {
        name: "support.function.general.racket"
        match: "<(exists|t|f|null|\\.\\.\\.|unique|others|none|many|current|self|gen-id|na|etc|\\.|\\?)>"
      }
    ]
  code:
    patterns: [
      {
        name: "meta.declaration.variable"
        # name: "markup.tabtree.code"
        match: "`.*?`"
      }
    ]
